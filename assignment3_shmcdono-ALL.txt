// input: ./extractChild HW3_images/lighthouse1.raw HW3_images/lighthouse1_extracted.raw 1 0 1
// input: ./extractChild HW3_images/lighthouse2.raw HW3_images/lighthouse2_extracted.raw 1 0 0
// input: ./extractChild HW3_images/lighthouse3.raw HW3_images/lighthouse3_extracted.raw 0 1 0
#include "geometricModification.hpp"

using namespace std;

int cornerCoordinates[2] = {0}; // for use with local variable

int findCornerCoords(unsigned char ***sourceImageData, int height, int width, int corner)
{
	switch(corner)
	{
		// find corner 1 by scanning left to right
		case 1:
			for (int j = 0; j < width; j++)
			{
				for (int i = 0; i < height; i++)
				{
					if (*(((unsigned char *)sourceImageData + i * width) + j) != 255)
					{
						cornerCoordinates[0] = i;
						cornerCoordinates[1] = j;
						return 1;
					}
				}
			}
		break;
		
		// find corner 2 by scanning top to bottom
		case 2:
			for (int i = 0; i < height; i++)
			{
				for (int j = 0; j < width; j++)	
				{
					if (*(((unsigned char *)sourceImageData + i * width) + j) != 255)
					{
						cornerCoordinates[0] = i;
						cornerCoordinates[1] = j;
						return 1;
					}
				}
			}
		break;
		
		// find corner 3 by right to left		
		case 3:
			for (int j = width - 1; j >= 0; j--)
			{
				for (int i = 0; i < height; i++)
				{
					if (*(((unsigned char *)sourceImageData + i * width) + j) != 255)
					{
						cornerCoordinates[0] = i;
						cornerCoordinates[1] = j;
						return 1;
					}
				}
			}
		break;
		
		// find corner 4 by scanning bottom to top
		case 4:
			for (int i = height - 1; i >= 0; i--)
			{
				for (int j = width - 1; j >= 0; j--)
				{
					if (*(((unsigned char *)sourceImageData + i * width) + j) != 255)
					{
						cornerCoordinates[0] = i;
						cornerCoordinates[1] = j;
						return 1;
					}
				}
			}
		break;
	}
	return 0;
}

int main(int argc, char *argv[])
{
	// Define file pointer and variables
	FILE *file;
	int BytesPerPixel = 1;
	int childA_height = 256;
	int childA_width = 256;
	int flipOverY = 0;
	int flipOverX = 0;
	int rotateCW = 0;
	
	// Check for proper syntax
	if (argc < 3)
	{
		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;
		cout << "program_name input_image.raw output_image.raw [BytesPerPixel = 1] [width = 256] [height = 256] [BytesPerPixelOut = 1]" << endl;
		return 0;
	}
	if(argc < 4) flipOverY = 0;
	else flipOverY = atoi(argv[3]);
	if(argc < 5) flipOverX = 0;
	else flipOverX = atoi(argv[4]);
	if(argc < 6) rotateCW = 0;
	else rotateCW = atoi(argv[5]);

	// Allocate child image data array
	unsigned char childImageData[childA_height][childA_width][BytesPerPixel];
	// Allocate dest image data array
	unsigned char rotatedImageData[childA_height][childA_width][BytesPerPixel];

	// Read child image (filename specified by first argument) into image data matrix
	if (!(file=fopen(argv[1],"rb"))) 
	{
		cout << "Cannot open child (a) file: " << argv[1] <<endl;
		exit(1);
	}
	fread(childImageData, sizeof(unsigned char), childA_height*childA_width*BytesPerPixel, file);
	fclose(file);

	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////
	int childCornerCoordinates[4][2] = {0};
	// find coordinates of all 4 corners
	for (int i = 0; i < 4; i++)
	{
		if (!findCornerCoords((unsigned char ***)childImageData, childA_height, childA_width, i + 1))
			printf("corner %d not found\n", i + 1);

		childCornerCoordinates[i][0] = cornerCoordinates[0];
		childCornerCoordinates[i][1] = cornerCoordinates[1];

		printf("corner %d = {%d, %d}\n", i + 1, childCornerCoordinates[i][0], childCornerCoordinates[i][1]);
	}

	// calculate angle between corner 4 and corner 3 (in anticipation of rotating c4-c3 edge to 0 deg, i.e. clockwise)
	float rise = abs(childCornerCoordinates[3][0] - childCornerCoordinates[2][0]);
	float run = abs(childCornerCoordinates[3][1] - childCornerCoordinates[2][1]);
	float theta = atan2f(rise,run);

	printf("theta = %f\n", theta); 

	// throw result into new array
	// height = sqrt[(Xc2 - Xc3)^2 + (Yc2 - Yc3)^2]
	int extracted_height = sqrtf(powf(childCornerCoordinates[1][0] - childCornerCoordinates[2][0],2)
								+ powf(childCornerCoordinates[1][1] - childCornerCoordinates[2][1],2));
	// width = sqrt[(Xc1 - Xc2)^2 + (Yc1 - Yc2)^2]
	int extracted_width = sqrtf(powf(childCornerCoordinates[0][0] - childCornerCoordinates[1][0],2)
								+ powf(childCornerCoordinates[0][1] - childCornerCoordinates[1][1],2));
	if(rotateCW)
		printf("new image dimensions {width,height} = {%d,%d}\n", extracted_height, extracted_width);
	else
		printf("new image dimensions {width,height} = {%d,%d}\n", extracted_width, extracted_height);
	
	// extraacted image data locations - dedicated rotate matrix when exchanging width and height values (not all are square)
	unsigned char extractedImageData[extracted_height][extracted_width];
	unsigned char extractedImageData_rot[extracted_width][extracted_height];

	// rotate image around center (reverse mapping)
	int x_center = 0.5 * (childCornerCoordinates[0][0] + childCornerCoordinates[2][0]);
	int y_center = 0.5 * (childCornerCoordinates[0][1] + childCornerCoordinates[2][1]);

	// new corners for extracted image
	int cornerCoordinates_extracted[4][2] = {0};

	// calculate u and v using reverse mapping
	for (int v = 0; v < childA_height; v++)
	{
		for (int u = 0; u < childA_width; u++)
		{
			// calculate new u and v values by multiplying x,y,1 mat with rotation mat
			// x = (u-x_origin)*cos(theta) + (y_origin-v)*sin(theta) + x_origin
			float x = (float)(u - x_center) * cosf(theta) - (float)(v - y_center) * sinf(theta) + x_center;
			// y = x*-sin(theta) + y*cos(theta)
			float y = (float)(u - x_center) * sinf(theta) + (float)(v - y_center) * cosf(theta) + y_center;

			// bilinear interpolate source image
			float weight_x = x - floorf(x);
			float weight_y = y - floorf(y);
			float weightMag = sqrtf(powf(weight_x,2) + powf(weight_y,2));
			int xFloor = (int)x;
			int xCeiling = (int)ceilf(x);
			int yFloor = (int)y;
			int yCeiling = (int)ceilf(y);

			// check to see if x and y correspond to a corner from the source image
			// if so, mark u and v as the same corner and use this to build an image
			for (int i = 0; i < 4; i++)
			{
				if(xFloor == childCornerCoordinates[i][0] && yFloor == childCornerCoordinates[i][1])
				{
					cornerCoordinates_extracted[i][0] = u;
					cornerCoordinates_extracted[i][1] = v;
				}
				else if (xCeiling == childCornerCoordinates[i][0] && yCeiling == childCornerCoordinates[i][1])
				{
					cornerCoordinates_extracted[i][0] = u;
					cornerCoordinates_extracted[i][1] = v;
				}
			}

			// bilinear interpolation to grab surrounding pixel values
			if(x < 256 && y < 256)
				rotatedImageData[v][u][0] = (unsigned char)(0.25 * (
										childImageData[xFloor][yFloor][0] + 
										childImageData[xFloor][yCeiling][0] + 
										childImageData[xCeiling][yFloor][0] + 
										childImageData[xCeiling][yCeiling][0]
										));
		}
	}

	// print out extracted corners
	printf("extracted corners: \n");
	for (int i = 0; i < 4; i++)
	{
		printf("corner %d = {%d,%d}\n", i + 1, cornerCoordinates_extracted[i][0], cornerCoordinates_extracted[i][1]);
	}
	// extract corrected image from rotated image
	// loop from top left corner to bottom right
	int iE = 0;
	int jE = 0;
	if (rotateCW)
	{
		for (int j = cornerCoordinates_extracted[1][0]; j <= cornerCoordinates_extracted[3][0]; j++)
		{
			for (int i = cornerCoordinates_extracted[2][1]; i >= cornerCoordinates_extracted[3][1]; i--)
			{
				if (flipOverY) 
				{
					if (flipOverX)
						extractedImageData_rot[extracted_width - iE][extracted_height - jE] = rotatedImageData[i][j][0];
					else extractedImageData_rot[iE][extracted_height - jE] = rotatedImageData[i][j][0];
				}
				else if (flipOverX) extractedImageData_rot[extracted_width - iE][jE] = rotatedImageData[i][j][0];
				else extractedImageData_rot[iE][jE] = rotatedImageData[i][j][0];
				jE++;
			}
			jE = 0;
			iE++;
		}
	}
		
	else
	{
		for (int i = cornerCoordinates_extracted[0][1]; i <= cornerCoordinates_extracted[2][1]; i++)
		{
			for (int j = cornerCoordinates_extracted[0][0]; j <= cornerCoordinates_extracted[2][0]; j++)
			{
				if (flipOverY) 
				{
					if (flipOverX)
						extractedImageData[extracted_height - iE][extracted_width - jE] = rotatedImageData[i][j][0];
					else extractedImageData[iE][extracted_width - jE] = rotatedImageData[i][j][0];
				}
				else if (flipOverX) extractedImageData[extracted_height - iE][jE] = rotatedImageData[i][j][0];
				else extractedImageData[iE][jE] = rotatedImageData[i][j][0];
				jE++;
			}
			jE = 0;
			iE++;
		}
	}
		
	//printf("ending corner val for extracted image = {%d,%d}\n", jE, iE);
	
	// Write image data (filename specified by second argument) from image data matrix
	if (!(file=fopen(argv[2],"wb"))) 
	{
		cout << "Cannot open file: " << argv[2] << endl;
		exit(1);
	}
	if(rotateCW)
		fwrite(extractedImageData_rot, sizeof(unsigned char), extracted_height*extracted_width, file);
	else
		fwrite(extractedImageData, sizeof(unsigned char), extracted_height*extracted_width, file);
	fclose(file);


	return 0;
}
// input: ./placeChild HW3_images/lighthouse.raw HW3_images/lighthouse1_extracted.raw HW3_images/lighthouse_filled.raw 112 108 1
// input: ./placeChild HW3_images/lighthouse_filled.raw HW3_images/lighthouse2_extracted.raw HW3_images/lighthouse_filled.raw 143 142 2
// input: ./placeChild HW3_images/lighthouse_filled.raw HW3_images/lighthouse3_extracted.raw HW3_images/lighthouse_filled.raw 209 214 3

#include "geometricModification.hpp"

using namespace std;

int cornerCoordinates[2] = {0}; // for use with local variable

int findCornerCoords(unsigned char ***sourceImageData, int width, int height, cornerData cData, int corner)
{
	// flag buffer to make sure we don't find any stray pixels at level 255 (like a simple 1d filter)
	int flagBuffer = 0;
	switch(corner)
	{
		// find corner 1 by scanning top left to bottom tight
		case 1:
			for (int j = cData.corner_startCoords[0][0]; j < cData.corner_endCoords[0][0]; j++)
			{
				for (int i = cData.corner_startCoords[0][1]; i < cData.corner_endCoords[0][1]; i++)
				{
					if (*(((unsigned char *)sourceImageData + i * width) + j) == 255 && !flagBuffer)
					{
						cornerCoordinates[0] = j;
						cornerCoordinates[1] = i;
						flagBuffer++;
					}
					else if (*(((unsigned char *)sourceImageData + i * width) + j) == 255 && flagBuffer < 5 && flagBuffer)
					{
						flagBuffer++;
					}
					else if (*(((unsigned char *)sourceImageData + i * width) + j) != 255 && flagBuffer < 5 && flagBuffer)
					{
						cornerCoordinates[0] = 0;
						cornerCoordinates[1] = 0;
						flagBuffer = 0;
					}
					if (*(((unsigned char *)sourceImageData + i * width) + j) == 255 && flagBuffer >= 5)
					{
						return 1;
					}
				}
			}
		break;
		
		// find corner 2 by scanning top right to bottom left
		case 2:
			for (int j = cData.corner_startCoords[1][0]; j > cData.corner_endCoords[1][0]; j--)
			{
				for (int i = cData.corner_startCoords[1][1]; i < cData.corner_endCoords[1][1]; i++)
				{
					if (*(((unsigned char *)sourceImageData + i * width) + j) == 255 && !flagBuffer)
					{
						cornerCoordinates[0] = j;
						cornerCoordinates[1] = i;
						flagBuffer++;
					}
					else if (*(((unsigned char *)sourceImageData + i * width) + j) == 255 && flagBuffer < 5 && flagBuffer)
					{
						flagBuffer++;
					}
					else if (*(((unsigned char *)sourceImageData + i * width) + j) != 255 && flagBuffer < 5 && flagBuffer)
					{
						cornerCoordinates[0] = 0;
						cornerCoordinates[1] = 0;
						flagBuffer = 0;
					}
					else if (*(((unsigned char *)sourceImageData + i * width) + j) == 255 && flagBuffer >= 5)
					{
						return 1;
					}
				}
			}
		break;
		
		// find corner 3 by scanning bottom right to top left		
		case 3:
			for (int j = cData.corner_startCoords[2][0]; j >= cData.corner_endCoords[2][0]; j--)
			{
				for (int i = cData.corner_startCoords[2][1]; i >= cData.corner_endCoords[2][1]; i--)
				{
					if (*(((unsigned char *)sourceImageData + i * width) + j) == 255 && !flagBuffer)
					{
						cornerCoordinates[0] = j;
						cornerCoordinates[1] = i;
						flagBuffer++;
					}
					else if (*(((unsigned char *)sourceImageData + i * width) + j) == 255 && flagBuffer < 5 && flagBuffer)
					{
						flagBuffer++;
					}
					else if (*(((unsigned char *)sourceImageData + i * width) + j) != 255 && flagBuffer < 5 && flagBuffer)
					{
						cornerCoordinates[0] = 0;
						cornerCoordinates[1] = 0;
						flagBuffer = 0;
					}
					if (*(((unsigned char *)sourceImageData + i * width) + j) == 255 && flagBuffer >= 5)
					{
						return 1;
					}
				}
			}
		break;
		
		// find corner 4 by scanning bottom to top
		case 4:
			for (int j = cData.corner_startCoords[3][0]; j < cData.corner_endCoords[3][0]; j++)
			{
				for (int i = cData.corner_startCoords[3][1]; i >= cData.corner_endCoords[3][1]; i--)
				{
					if (*(((unsigned char *)sourceImageData + i * width) + j) == 255 && !flagBuffer)
					{
						cornerCoordinates[0] = j;
						cornerCoordinates[1] = i;
						flagBuffer++;
					}
					else if (*(((unsigned char *)sourceImageData + i * width) + j) == 255 && flagBuffer < 5 && flagBuffer)
					{
						flagBuffer++;
					}
					else if (*(((unsigned char *)sourceImageData + i * width) + j) != 255 && flagBuffer < 5 && flagBuffer)
					{
						cornerCoordinates[0] = 0;
						cornerCoordinates[1] = 0;
						flagBuffer = 0;
					}
					if (*(((unsigned char *)sourceImageData + i * width) + j) == 255 && flagBuffer >= 5)
					{
						return 1;
					}
				}
			}
		break;
	}
		

	return 0;
}

int main(int argc, char *argv[])
{
	// Define file pointer and variables
	FILE *file;
	int BytesPerPixel = 1;
	int child_height = 256;
	int child_width = 256;
	int holeNum;
	
	// Check for proper syntax
	if (argc < 3)
	{
		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;
		cout << "program_name input_image.raw output_image.raw [BytesPerPixel = 1] [width = 256] [height = 256] [BytesPerPixelOut = 1]" << endl;
		return 0;
	}
	// take in child width and height
	if (argc < 5) child_width = 256; 
	else child_width = atoi(argv[4]);
	if (argc < 6) child_height = 256; 
	else child_height = atoi(argv[5]);
	if(argc < 7) holeNum = 1;
	else holeNum = atoi(argv[6]);

	if(holeNum <= 0) holeNum = 1;
	else if (holeNum > 3) holeNum = 3;

	// Allocate child image data array
	unsigned char childA_imageData[child_height][child_width][BytesPerPixel];
	// Allocate parent image data arrray
	unsigned char parentImageData[height][width][BytesPerPixel];

	// Read parent image (filename specified by first argument) into image data matrix
	if (!(file=fopen(argv[1],"rb"))) 
	{
		cout << "Cannot open parent file: " << argv[1] <<endl;
		exit(1);
	}
	fread(parentImageData, sizeof(unsigned char), height*width*BytesPerPixel, file);
	fclose(file);

	// Read child image (filename specified by first argument) into image data matrix
	if (!(file=fopen(argv[2],"rb"))) 
	{
		cout << "Cannot open child (a) file: " << argv[2] <<endl;
		exit(1);
	}
	fread(childA_imageData, sizeof(unsigned char), child_height*child_width, file);
	fclose(file);

	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////
	int holeCoordinates[4][2] = {0};

	cornerData holes[3];
	holes[0].corner_startCoords[0][0] = 0; // top left of quad 1
	holes[0].corner_startCoords[0][1] = 0;
	holes[0].corner_endCoords[0][0] = width/2; // bottom right of quad 1
	holes[0].corner_endCoords[0][1] = height - 1;
	holes[0].corner_startCoords[1][0] = width/2; // top right of quad 1
	holes[0].corner_startCoords[1][1] = 0;
	holes[0].corner_endCoords[1][0] = 0; // bottom left of quad 1
	holes[0].corner_endCoords[1][1] = height - 1;
	holes[0].corner_startCoords[2][0] = width/2; // bottom right of quad 1
	holes[0].corner_startCoords[2][1] = height - 1;
	holes[0].corner_endCoords[2][0] = 0;  // top left of quad 1
	holes[0].corner_endCoords[2][1] =  0;
	holes[0].corner_startCoords[3][0] = 0; // bottom left of quad 1
	holes[0].corner_startCoords[3][1] = height - 1;
	holes[0].corner_endCoords[3][0] = width/2; // top right of quad 1
	holes[0].corner_endCoords[3][1] = 0;

	holes[1].corner_startCoords[0][0] = width/2; // top left of quad 2
	holes[1].corner_startCoords[0][1] = 0;
	holes[1].corner_endCoords[0][0] = width - 1; // bottom right of quad 2
	holes[1].corner_endCoords[0][1] = height/2;
	holes[1].corner_startCoords[1][0] = width - 1; // top right of quad 2
	holes[1].corner_startCoords[1][1] = 0;
	holes[1].corner_endCoords[1][0] = width/2; // bottom left of quad 2
	holes[1].corner_endCoords[1][1] = height/2;
	holes[1].corner_startCoords[2][0] = width - 1; // bottom right of quad 2
	holes[1].corner_startCoords[2][1] = height/2;
	holes[1].corner_endCoords[2][0] = width/2; 
	holes[1].corner_endCoords[2][1] = 0;
	holes[1].corner_startCoords[3][0] = width/2;
	holes[1].corner_startCoords[3][1] = height/2;
	holes[1].corner_endCoords[3][0] = width - 1;
	holes[1].corner_endCoords[3][1] = 0;

	holes[2].corner_startCoords[0][0] = width/2; // top left of quad 3
	holes[2].corner_startCoords[0][1] = height/2;
	holes[2].corner_endCoords[0][0] = width - 1; // bottom right of quad 3
	holes[2].corner_endCoords[0][1] = height - 1;
	holes[2].corner_startCoords[1][0] = width - 1; // top right of quad 3
	holes[2].corner_startCoords[1][1] = height/2;
	holes[2].corner_endCoords[1][0] = width/2; // bottom left of quad 3
	holes[2].corner_endCoords[1][1] = height - 1;
	holes[2].corner_startCoords[2][0] = width - 1; // bottom right of quad 3
	holes[2].corner_startCoords[2][1] = height - 1;
	holes[2].corner_endCoords[2][0] = width/2;  // top left of quad 3
	holes[2].corner_endCoords[2][1] =  height/2;
	holes[2].corner_startCoords[3][0] = width/2; // bottom left of quad 3
	holes[2].corner_startCoords[3][1] = height - 1;
	holes[2].corner_endCoords[3][0] = width - 1; // top right of quad 3
	holes[2].corner_endCoords[3][1] = height/2;
	
	// find coordinates of all 4 corners of selected hole

	printf("hole %d corner cordinates: \n", holeNum);
	for (int i = 0; i < 4; i++)
	{
		if (!findCornerCoords((unsigned char ***)parentImageData, width, height, holes[holeNum - 1], i + 1))
			printf("corner %d not found\n", i + 1);

		holeCoordinates[i][0] = cornerCoordinates[0];
		holeCoordinates[i][1] = cornerCoordinates[1];

		printf("corner %d = {%d, %d}\n", i + 1, holeCoordinates[i][0], holeCoordinates[i][1]);
	}

	// height = sqrt[(Xc2 - Xc3)^2 + (Yc2 - Yc3)^2]
	int hole_height = sqrtf(powf(holeCoordinates[1][0] - holeCoordinates[2][0],2)
								+ powf(holeCoordinates[1][1] - holeCoordinates[2][1],2));
	// width = sqrt[(Xc1 - Xc2)^2 + (Yc1 - Yc2)^2]
	int hole_width = sqrtf(powf(holeCoordinates[0][0] - holeCoordinates[1][0],2)
								+ powf(holeCoordinates[0][1] - holeCoordinates[1][1],2));
	printf("hole %d dimensions {width,height} = {%d,%d}\n", holeNum,hole_width, hole_height);

	
	// find center
	// int x_center = 0.5 * (holeCoordinates[0][0] + holeCoordinates[2][0]);
	// int y_center = 0.5 * (holeCoordinates[0][1] + holeCoordinates[2][1]);


	// scale image to hole dimensions
	unsigned char scaledChild[hole_height][hole_width];
	float yScale = (float)hole_height/(float)child_height;
	float xScale = (float)hole_width/(float)child_width;
	printf("xScale = %f\nyScale = %f\n", xScale, yScale);

	// calculate u and v using reverse mapping
	for (int u = 0; u < hole_width; u++)
	{
		for (int v = 0; v < hole_height; v++)	
		{
			// scale u and v values to find source pixel value
			float x = (float)u / xScale;
			float y = (float)v / yScale;

			// bilinear interpolate source image
			// float weight_x = x - floorf(x);
			// float weight_y = y - floorf(y);
			// float weightMag = sqrtf(powf(weight_x,2) + powf(weight_y,2));
			int xFloor = (int)x;
			int xCeiling = (int)ceilf(x);
			int yFloor = (int)y;
			int yCeiling = (int)ceilf(y);

			// bilinear interpolation to grab surrounding pixel values
			// have to flip u and v for some reason [u][v] instead of [v][u]. investigate later
			if(x < child_width && y < child_width)
				scaledChild[u][v] = (unsigned char)(0.25 * (
										childA_imageData[xFloor][yFloor][0] + 
										childA_imageData[xFloor][yCeiling][0] + 
										childA_imageData[xCeiling][yFloor][0] + 
										childA_imageData[xCeiling][yCeiling][0]
										));
		}
	}
	// place extracted child image in hole starting at corner 1
	int iC = 0;
	int jC = 0;
	for (int i = holeCoordinates[0][1]; i < holeCoordinates[2][1]; i++)
	{
		for (int j = holeCoordinates[0][0]; j < holeCoordinates[2][0]; j++)
		{
			if (iC < hole_height && jC < hole_width)
			{
				parentImageData[i][j][0] = scaledChild[iC][jC];
				jC++;
				// printf("parentImageData[%d][%d][0] = %d\n", i, j, parentImageData[i][j][0]);
				// printf("childA_imageData[%d][%d][0] = %d\n", iC, jC, childA_imageData[iC][jC][0]);
			}
		}
		jC = 0;
		if (iC < hole_height)
			iC++;
	}
	
	// Write image data (filename specified by second argument) from image data matrix
	if (!(file=fopen(argv[3],"wb"))) 
	{
		cout << "Cannot open file: " << argv[3] << endl;
		exit(1);
	}

	fwrite(parentImageData, sizeof(unsigned char), height*width, file);
	fclose(file);

	return 0;
}
// input: ./shrinking HW3_images/pattern1.raw HW3_images/pattern1-shrink.raw

#include "shrinking-old.hpp"

using namespace std;

unsigned char zeroPad(unsigned char ***sourceImageData, int height, int width, int i, int j, int nh, int nw)
{
	if(i + nh >= 0)
	{
		if (i + nh < height)
		{
			if(j + nw >= 0)
			{
				if (j + nw < width)
					return *(((unsigned char *)sourceImageData + (i + nh)*width) + (j + nw));
				else
					return 0;
			}
			else
				return 0;
		}
		else
			return 0;
	}
	else
		return 0;
}

int zeroPad_int(int **mMap, int height, int width, int i, int j, int nh, int nw)
{
	if(i + nh >= 0)
	{
		if (i + nh <= height)
		{
			if(j + nw >= 0)
			{
				if (j + nw < width)
					return *(((int *)mMap + (i + nh)*width) + (j + nw));
				else
					return 0;
			}
			else
				return 0;
		}
		else
			return 0;
	}
	else
		return 0;
}

int buildInput(unsigned char ***sourceImageData, int* inputArr, int height, int width, int i, int j)
{
    unsigned char pixels[9] = {0};
	pixels[0] = zeroPad((unsigned char ***)sourceImageData, height, width, i, j, 0, 1);
    pixels[1] = zeroPad((unsigned char ***)sourceImageData, height, width, i, j, -1, 1);
    pixels[2] = zeroPad((unsigned char ***)sourceImageData, height, width, i, j, -1, 0);
    pixels[3] = zeroPad((unsigned char ***)sourceImageData, height, width, i, j, -1, -1);
    pixels[4] = zeroPad((unsigned char ***)sourceImageData, height, width, i, j, 0, -1);
    pixels[5] = zeroPad((unsigned char ***)sourceImageData, height, width, i, j, 1, -1);
    pixels[6] = zeroPad((unsigned char ***)sourceImageData, height, width, i, j, 1, 0);
    pixels[7] = zeroPad((unsigned char ***)sourceImageData, height, width, i, j, 1, 1);
    pixels[8] = zeroPad((unsigned char ***)sourceImageData, height, width, i, j, 0, 0); // center pixel to be returnd by function

    for (int i = 0; i < 8; i++)
    {	
        if (pixels[i] > 0) *(inputArr + i) = 1;
        else *(inputArr + i) = 0;			
    }
    if (pixels[8] > 0) return 1;
    else return 0;
}

int buildInput_int(int **mMap, int* inputArr, int height, int width, int i, int j)
{
	*(inputArr + 0) = zeroPad_int((int **)mMap, height, width, i, j, 0, 1);
    *(inputArr + 1) = zeroPad_int((int **)mMap, height, width, i, j, -1, 1);
    *(inputArr + 2) = zeroPad_int((int **)mMap, height, width, i, j, -1, 0);
    *(inputArr + 3) = zeroPad_int((int **)mMap, height, width, i, j, -1, -1);
    *(inputArr + 4) = zeroPad_int((int **)mMap, height, width, i, j, 0, -1);
    *(inputArr + 5) = zeroPad_int((int **)mMap, height, width, i, j, 1, -1);
    *(inputArr + 6) = zeroPad_int((int **)mMap, height, width, i, j, 1, 0);
    *(inputArr + 7) = zeroPad_int((int **)mMap, height, width, i, j, 1, 1);
    *(inputArr + 8) = zeroPad_int((int **)mMap, height, width, i, j, 0, 0); // center pixel to be returnd by function

    return *(inputArr + 8);
}

int filterHelper(int *inputArr, int numMasks)
{
	for (int msk = 0; msk < numMasks; msk++)
	{
		int maskMatch = 1;
		for (int i = 0; i < 8; i++)
		{
			// if no match, break and compare to next mask
			// to handle both cond mask and uncond mask lookup
			if (*(inputArr + i) != (numMasks == NUM_COND_MASKS) ? condSMasks[msk][i] : uncondSTMasks[msk][i])
			{
				maskMatch = 0;
			}
		}
		if(maskMatch)
			return 1;
	}	
	return 0;
}

int filterOne(int X, int *inputArr)
{
	int maskMatch = 1;
    if (X == 1)
    {
        if(!filterHelper(inputArr, NUM_COND_MASKS))
		{
			maskMatch = 0;
		}
    }
	return maskMatch;	
}

int filterTwo(int M, int *intermediateArr)
{
    if (M == 1)
    {
		return filterHelper(intermediateArr, NUM_UNCOND_MASKS);
    }
	return 0;				
}

int main(int argc, char *argv[])
{
	// Define file pointer and variables
	FILE *file;
	int BytesPerPixel;
	int width, height;

	// Check for proper syntax
	if (argc < 3)
	{
		cout << "Syntax Error - Incorrect Parameter Usage:" << endl;
		cout << "program_name input_image.raw output_image.raw [BytesPerPixel = 1] [width = 256] [height = 256] [BytesPerPixelOut = 1]" << endl;
		return 0;
	}
	
	// Check if image is grayscale or color
	if (argc < 4) BytesPerPixel = 1; // default is grey image
	else BytesPerPixel = atoi(argv[3]);

	// Check if width is specified
	if (argc < 5) width = 375;
	else width = atoi(argv[4]);

	// check if height is specified
	if (argc < 6) height = 375;
	else height = atoi(argv[5]);
	
	// Allocate source image data array
	unsigned char sourceImageData[height][width][BytesPerPixel];
	// Allocate intermediate image data array
	unsigned char intermediateImageData[height][width][BytesPerPixel];
	// Allocate dest image data array
	unsigned char destImageData[height][width][1];

	// Read image (filename specified by first argument) into image data matrix
	if (!(file=fopen(argv[1],"rb"))) 
	{
		cout << "Cannot open file: " << argv[1] <<endl;
		exit(1);
	}
	fread(sourceImageData, sizeof(unsigned char), height*width*BytesPerPixel, file);
	fclose(file);

	///////////////////////// INSERT YOUR PROCESSING CODE HERE /////////////////////////
	int runFlag = 1;
	int roundNum = 0;
	while(runFlag)
	{
		int iMap[height][width];
		int mMap[height][width];	
		// build intermediate array by mask matching every binarized pixel in the input image matrix
		for (int j = 0; j < width; j++)
		{
			for (int i = 0; i < height; i++)
			{
				int input[8] = {0};
				
				// center pixel to be changed
				// X value goes into iMap matrix
				iMap[i][j] = buildInput((unsigned char ***)sourceImageData, input, height, width, i, j);			

				// run input through first filter and build intermediate array
				// M value goes into mMap matrix
				mMap[i][j] = filterOne(iMap[i][j], input);
			}
		}
		
		// build final output array by mask matching every value in the mMap matrix
		for (int j = 0; j < width; j++)
		{
			for (int i = 0; i < height; i++)
			{
				int intermediate[8] = {0};
				int M = buildInput_int((int **)mMap, intermediate, height, width, i, j);
				
				// run intermediate array through 2nd filter
				int P = filterTwo(M, intermediate);

				// calculate output
				intermediateImageData[i][j][0] = 255 * (iMap[i][j] && (!M || P));
			}
		}

		// check to see if image has changed, if not, exit loop
		// allocate data to destImageData
		int similar = 1;
		for (int j = 0; j < width; j++)
		{
			for (int i = 0; i < height; i++)
			{
				if(intermediateImageData[i][j][0] != sourceImageData[i][j][0])
				{
					printf("round %d: different at {%d,%d}\n", roundNum, i, j);
					sourceImageData[i][j][0] = intermediateImageData[i][j][0];
					similar = 0;
				}
				destImageData[i][j][0] = sourceImageData[i][j][0];
			}
		}

		if(similar) runFlag = 0;
		else roundNum++;
	}
	// Write image data (filename specified by second argument) from image data matrix
	if (!(file=fopen(argv[2],"wb"))) 
	{
		cout << "Cannot open file: " << argv[2] << endl;
		exit(1);
	}

	fwrite(destImageData, sizeof(unsigned char), height*width*BytesPerPixel, file);
	fclose(file);

	return 0;
}
#include "morph.hpp"

using namespace std;

// call from j = 0
unsigned char dComboGenerator(unsigned char *dSequence, int numDs, int i, int j)
{
    if (j > i)
    {
        if (j == numDs - 1) return !*(dSequence + j);
        return !*(dSequence + j) | dComboGenerator(dSequence, numDs, i, j + 1);
    }
    else
    {
        if (j == numDs - 1) return *(dSequence + j);
        return *(dSequence + j) | dComboGenerator(dSequence, numDs, i, j + 1); 
    }
    
}

int main(int argc, char *argv[])
{
    // unconditional masks

    // define output rules for each letter
    // A || B || C = 1 (7 varations)
    // A || B = 1 (3 variations)
    // D || D ... || D = 0 || 1 ([number Ds]^2 variations)
    // M && M && ... && M = 1 (1 variation)

    // keep track of total generated masks to make sure we don't go over 317
    int numGenMasks = 0;
    // keep track of place in output mask array
    int blockPointer = 0;
    // loop through all mask char sequences
    for (int m = 0; m < NUM_UNCOND_MASK_TEMPLATES; m++)
    {
        // loop through individual mask to count number of Ds
        int numDs = 0;
        // catch ABs or ABCs with flag
        int abFlag = 0;
        int abcFlag = 0;

        // keep byte of Ds to track binary sequence
        unsigned char _dTracker = 0b00000000;
        // make an array of binary numbers to check to see if a certain D is active in any given loop
        unsigned char _activeDs[8] = {0};

        for (int i = 0; i < 8; i++)
        {
            if(uncondMaskTemplates[m][i] == 'D')
            {
                numDs++;
                unsigned char temp = pow(2,i);
                _dTracker += temp;
                _activeDs[i] = temp;
            }
            else if(uncondMaskTemplates[m][i] == 'C')
            {
                abcFlag = 1;
                abFlag = 0;
            }
            else if(uncondMaskTemplates[m][i] == 'A' && !abcFlag)
            {
                abFlag = 1;
            }
        }
        printf("mask %d: Ds: %d, ABs: %d, ABCs: %d\n", m + 1, numDs, abFlag, abcFlag);

        printf("Mask %d dTracker = ", m + 1);
        for (int i = 0; i < 8; i++) 
        {
            printf("%d", !!((_dTracker << i) & 0x80));
        }
        printf("\n");

        // build an array dLocations that contains only the active dLocations of length numDs
        unsigned char dLocations[numDs];
        int activateArray[numDs][numDs];
        for (int i = 0; i < numDs; i++)
        {
            for(int j = 0; j < numDs; j++)
            {
                if (j >= i)
                    activateArray[i][j] = 1;
                else activateArray[i][j] = 0;
            }
        }
        
        int d = 0;
        for (int i = 0; i < 8; i++)
        {
            if(_activeDs[i])
            {
                dLocations[d] = _activeDs[i];
                d++;
            } 
        }
        
        // build an array with all possible d combinations of 
        int dCombos = (int)pow(2,numDs);
        printf("number d combos = %d\n", dCombos);
        unsigned char possibleDCombos[dCombos];
        for (int i = 0; i < dCombos; i++)
            possibleDCombos[i] = 0;
        d = 0;

        // loop through activate array and build permutations to activate different Ds in input array
        for (int i = 0; i < numDs; i++)
        {
            while(next_permutation(activateArray[i], activateArray[i] + numDs))
            {
                for (int j = 0; j < numDs; j++)
                {
                    possibleDCombos[d] |= activateArray[i][j] * dLocations[j];
                };   
                d++;
            } 
            for (int j = 0; j < numDs; j++)
            {
                possibleDCombos[d] |= activateArray[i][j] * dLocations[j];
            }
            d++;       
        } 
        for (int i = 0; i < dCombos; i++)
        {
            printf("possibleDCombos[%d] = ", i);
            for (int j = 0; j < 8; j++) 
            {
                printf("%d", !!((possibleDCombos[i] << j) & 0x80));
            }
            printf("\n");
        }    
        
       
        // keep byte of ABs to track binary sequence
        unsigned char _abTracker = 0b00000011;
        unsigned char ab_aActive = 0b00000010;
        unsigned char ab_bActive = 0b00000001;

        // keep byte of ABCs to track binary sequence
        unsigned char _abcTracker = 0b00000111;
        unsigned char abc_aActive = 0b00000100;
        unsigned char abc_bActive = 0b00000010;
        unsigned char abc_cActive = 0b00000001;

        // allocate blocksize based on number of variations in mask
        int blockSize = 1;
        if(abFlag)
        {
            blockSize *= 3;
        }
        else if (abcFlag)
        {
            blockSize *= 7;
        }
        if(numDs)
            blockSize *= dCombos;

        printf("Mask %d numVariations: %d\n", m + 1, blockSize);
        numGenMasks += blockSize;

        printf("Mask %d Variations:\n", m + 1);
        int variationNum = 1;
        // loop throuh masks and drop variations into output
        // keep track of each D and make sure you're going through all combinations

        for (int i = 0; i < dCombos; i++)
        {
            // assign temp vals for every variation
            unsigned char abTracker = _abTracker;
            unsigned char abcTracker = _abcTracker;

            if (abFlag)
            {
                for (int j = 0; j < 3; j++)
                {
                    for (int l = 0; l < 8; l++)
                    {
                        if(uncondMaskTemplates[m][l] == 'A')
                        {
                            if(!!((abcTracker << 6) & 0x80))
                                uncondMasks_ST[blockPointer][l] = 1;
                            else
                                uncondMasks_ST[blockPointer][l] = 0;
                        }
                        else if (uncondMaskTemplates[m][l] == 'B')
                        {
                            if(!!((abcTracker << 7) & 0x80))
                                uncondMasks_ST[blockPointer][l] = 1;
                            else
                                uncondMasks_ST[blockPointer][l] = 0;
                        }
                        // M cases
                        else if(uncondMaskTemplates[m][l] == 'M')
                        {
                            uncondMasks_ST[blockPointer][l] = 1;
                        }
                        // 0 cases
                        else if (uncondMaskTemplates[m][l] == 0) 
                            uncondMasks_ST[blockPointer][l] = 0;
                        // D cases
                        else if (uncondMaskTemplates[m][l] == 'D')
                        {
                            if(!!((possibleDCombos[i] << l) & 0x80)) 
                                uncondMasks_ST[blockPointer][l] = 1;
                            else
                                uncondMasks_ST[blockPointer][l] = 0;
                        }
                    }
                    abTracker--;
                    blockPointer++;
                }
            }
            else if(abcFlag)
            {
                for (int j = 0; j < 7; j++)
                {
                    for (int l = 0; l < 8; l++)
                    {
                        if(uncondMaskTemplates[m][l] == 'A')
                        {
                            if(!!((abcTracker << 5) & 0x80))
                                uncondMasks_ST[blockPointer][l] = 1;
                            else
                                uncondMasks_ST[blockPointer][l] = 0;
                        }
                        else if (uncondMaskTemplates[m][l] == 'B')
                        {
                            if(!!((abcTracker << 6) & 0x80))
                                uncondMasks_ST[blockPointer][l] = 1;
                            else
                                uncondMasks_ST[blockPointer][l] = 0;
                        }
                        else if (uncondMaskTemplates[m][l] == 'C')
                        {
                            if(!!((abcTracker << 7) & 0x80))
                                uncondMasks_ST[blockPointer][l] = 1;
                            else
                                uncondMasks_ST[blockPointer][l] = 0;
                        }
                        // M cases
                        else if(uncondMaskTemplates[m][l] == 'M')
                        {
                            uncondMasks_ST[blockPointer][l] = 1;
                        }
                        // 0 cases
                        else if (uncondMaskTemplates[m][l] == 0) 
                            uncondMasks_ST[blockPointer][l] = 0;
                        // D cases
                        else if (uncondMaskTemplates[m][l] == 'D')
                        {
                            if(!!((possibleDCombos[i] << l) & 0x80)) 
                                uncondMasks_ST[blockPointer][l] = 1;
                            else
                                uncondMasks_ST[blockPointer][l] = 0;
                        }
                    }
                    abcTracker--;
                    blockPointer++;
                }
            }
            else
            {   
                for (int l = 0; l < 8; l++)
                {
                    // M cases
                    if(uncondMaskTemplates[m][l] == 'M')
                    {
                        uncondMasks_ST[blockPointer][l] = 1;
                    }
                    // 0 cases
                    else if (uncondMaskTemplates[m][l] == 0) 
                        uncondMasks_ST[blockPointer][l] = 0;
                    // D cases
                    else if (uncondMaskTemplates[m][l] == 'D')
                    {
                        if(!!((possibleDCombos[i] << l) & 0x80)) 
                            uncondMasks_ST[blockPointer][l] = 1;
                        else
                            uncondMasks_ST[blockPointer][l] = 0;
                    }
                }
                blockPointer++;
            }
        }
    }
    for (int i = 0; i < blockPointer; i++)
    {
        printf("uncondMasks_ST[%d] = {", i);
        for (int l = 0; l < 8; l++)
            printf("%d,", uncondMasks_ST[i][l]);
        printf("}\n");
    }
    printf("blockPointer = %d\n", blockPointer);
    printf("numGenMasks = %d\n", numGenMasks);   
    
    return 0;
}